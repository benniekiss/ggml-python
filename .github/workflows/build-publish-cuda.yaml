name: Build and Publish Python Wheels (CUDA)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build wheels on ${{ matrix.build.os }}
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        build:
          - os: ubuntu-24.04
            mamba: git uv cmake cxx-compiler cuda==${{ vars.CUDA_VERSION }} cuda-nvcc cudatoolkit
            cmake: "-DGGML_CUDA=ON -DGGML_CUDA_FORCE_MMQ=ON"
          - os: windows-2022
            mamba: git uv cmake cxx-compiler cuda==${{ vars.CUDA_VERSION }} cuda-nvcc cuda-toolkit
            cmake: "-DGGML_CUDA=ON -DGGML_CUDA_FORCE_MMQ=ON"

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # https://learn.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2022
      - name: setup windows
        if: matrix.build.os == 'windows-2022'
        shell: cmd
        run: |
          # Download the Build Tools bootstrapper.
          curl -SL --output vs_buildtools.exe https://aka.ms/vs/17/release/vs_buildtools.exe `
          `
          # Install Build Tools with the Microsoft.VisualStudio.Workload.AzureBuildTools workload, excluding workloads and components with known issues.
          && (start /w vs_buildtools.exe --quiet --wait --norestart --nocache `
              --installPath "%ProgramFiles(x86)%\Microsoft Visual Studio\2022\BuildTools" `
              --add Microsoft.VisualStudio.Workload.AzureBuildTools `
              --remove Microsoft.VisualStudio.Component.Windows10SDK.10240 `
              --remove Microsoft.VisualStudio.Component.Windows10SDK.10586 `
              --remove Microsoft.VisualStudio.Component.Windows10SDK.14393 `
              --remove Microsoft.VisualStudio.Component.Windows81SDK `
              || IF "%ERRORLEVEL%"=="3010" EXIT 0) `
          `
          # Cleanup
          && del /q vs_buildtools.exe

      - uses: mamba-org/setup-micromamba@v2
        with:
          cache-environment: true
          cache-downloads: false
          environment-name: ci
          create-args: ${{ matrix.build.mamba }}
          condarc: |
            channels:
              - nvidia
              - conda-forge
          init-shell: bash
          post-cleanup: all

      - name: build wheels and sdist
        env:
          CMAKE_ARGS: ${{ matrix.build.cmake }}
        run: |
          for ver in ${{ vars.PYTHON_VERSIONS }}; do
            echo "Building wheels for Python ${ver} (CUDA ${{ vars.CUDA_VERSION }})"

            uv build --python "${ver}" . -Cwheel.build-tag="1cu${{ vars.CUDA_VERSION }}"
          done

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cuda-${{ matrix.build.os }}-${{ strategy.job-index }}
          path: dist/*

  upload_pypi:
    needs: build
    runs-on: ubuntu-24.04
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cuda-*
          path: dist
          merge-multiple: true

      - name: publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
